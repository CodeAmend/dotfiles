" Set shell
set shell=/usr/bin/zsh

" set exrc
" set secure

let g:ruby_host_prog='/usr/bin/neovim-ruby-host'
let g:node_host_prog='/usr/bin/neovim-node-host'
let g:python_host_prog='/usr/bin/python'

filetype plugin indent on
autocmd InsertLeave * write

" Plugins
call plug#begin()
" Vim helpers
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-repeat'

" Syntax
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'HerringtonDarkholme/yats.vim'

" Autocomplete Servers Linters
Plug 'mhartington/nvim-typescript', { 'do': './install.sh' }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'dense-analysis/ale'

" Tools
Plug 'mileszs/ack.vim'
Plug 'mattn/emmet-vim'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" Color Stuff
Plug 'chriskempson/base16-vim'

call plug#end()

execute pathogen#infect()

" COLORS
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" mhartington/nvim-typescript
" let g:nvim_typescript#type_info_on_hold = 1

" Deoplete Options
let g:deoplete#enable_at_startup = 1
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" ALE settings
let g:ale_linters = {'javascript': ['eslint']}

highlight clear ALEErrorSign
" highlight clear ALEWarningSign

" better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = \"<Tab>"
" let g:UltiSnipsJumpForwardTrigger = \"<Tab>"
" let g:UltiSnipsJumpBackwardTrigger = \"<S-Tab>"

" let g:UltiSnipsMappingsToIgnore = ['autocomplete']

" Underline currently edited line
" if !has("gui_running")
"     :autocmd InsertEnter * set cul
"     :autocmd InsertLeave * set nocul
"  endif

" let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
" let g:cpp_class_decl_highlight = 1
" let g:cpp_posix_standard = 1

" SETS
set number
set relativenumber
set equalalways
set splitright
" set splitbelow
" set mouse=a

set path+=**
set wildignore+=*/node_modules/*
set wildignore+=*/__snapshots__/*
set wildignore+=*/public/*
set wildignore+=*/.cache/*
set wildignore+=*/static/*
set wildignore+=.git
set wildignore+=*.jpg
set wildignore+=*.png

" Indent setup
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

" autocmd InsertLeave * write

" Ignore case unless caps used
" set ignorecase
set smartcase

" LEADER
let mapleader="\<Space>"

" No ex mode
nnoremap Q <Nop>

" toggle previous buffer
nnoremap <Leader><Leader> <C-^>

" Fullscreen - open current buffer in new tab
nnoremap tt :tab split<CR>

" Disable arrows in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable arrows in Insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>


" Move around open buffers easily
nnoremap <C-h> <C-W><C-H>
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>

" " Auto close brackets
" inoremap " ""<left>
" inoremap ' ''<left>
" inoremap ` ``<left>
" inoremap ( ()<left>
" inoremap [ []<left>
" inoremap { {}<left>

" Close and indent <CR> brackets
inoremap \"<CR> \"<CR>"<ESC>O
inoremap '<CR> '<CR>'<ESC>O
inoremap `<CR> `<CR>`<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap [<CR> [<CR>]<ESC>O
inoremap (<CR> (<CR>)<ESC>O

" print the working directory
nnoremap <LEADER>p :echo expand('%')<CR>
nnoremap <LEADER>P :r !echo $(pwd)<CR>

nnoremap <ESC> :noh<CR>

" Use '%%' to search in folder of file opened
cabbr <expr> %% fnameescape(expand('%'))
